syntax = "proto3";
option java_multiple_files = true;
package demo.interfaces.grpc;

message Group {
    int64 groupID = 1;
    string groupParent = 2;
    string groupName = 3;
    int64 groupNumberMembers = 4;
}

message GroupsRequest{}
message GroupsResponse {
    repeated Group Groups=1;
}
// The Group Service definition.
service GroupService {

    //  unary RPCs where the client sends a single request to the server and gets a single response back, just like a normal function call.
    rpc getGroup (Group) returns (Group) {
    }
    

    //  bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream. The two streams operate independently, so clients and servers can read and write in whatever order they like: for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message, or some other combination of reads and writes. The order of messages in each stream is preserved.
    rpc getAllGroupsByIDList (stream Group) returns (stream Group) {
    }

    rpc getAllGroups (stream GroupsRequest) returns (stream GroupsResponse) {
    }
    

    //  of client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream. Once the client has finished writing the messages, it waits for the server to read them and return its response. Again gRPC guarantees message ordering within an individual RPC call.
    rpc getLargestGroup (stream Group) returns (Group) {
    }
}